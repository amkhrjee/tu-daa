#include <iostream>
using namespace std;

int findMaxIndex(int **arr, int left, int right, int y)
{
    // if (left <= right)
    // {
    cout << "-----------" << endl;
    int midIndex = (left + right) / 2;
    cout << "left index= " << left << endl;
    cout << "right index= " << right << endl;
    cout << "mid Index = " << midIndex << endl;
    if (y > arr[midIndex][1])
    {
        cout << "y is greater than the mid" << endl;
        findMaxIndex(arr, midIndex + 1, right, y);
    }
    else if (y < arr[midIndex][1] && y <= arr[midIndex - 1][1])
    {
        cout << "y is less the mid" << endl;
        cout << "it maybe less than or equal to the one before" << endl;
        findMaxIndex(arr, left, midIndex, y);
    }
    else if (y <= arr[midIndex][1] && y > arr[midIndex - 1][1])
    {
        // we have hit the index!
        cout << "y is equal to the mid or less than it and greater than the one before" << endl;
        // this is the highest possible index
        // the actual index depends on x
        return midIndex;
    }
}

// int findBuildingIndex(int **arr, int x, int maxIndex)
// {
//     int totalXCovered = 0;
//     bool hitX = false;
//     int currIndex = 0;
//     cout << "hi" << endl;
//     while (currIndex <= maxIndex && totalXCovered < x)
//     {
//         totalXCovered += arr[currIndex++][0];
//         cout << "hello" << endl;
//     }
//     currIndex -= 1;

//     return currIndex;
// }

int main()
{
    int len = 6;
    int **arr = new int *[len];

    // first param = width
    // second param = height
    arr[0] = new int[2]{2, 1};
    arr[1] = new int[2]{3, 3};
    arr[2] = new int[2]{2, 4};
    arr[3] = new int[2]{2, 7};
    arr[4] = new int[2]{2, 9};
    arr[5] = new int[2]{1, 10};

    // we can use the y axis to set constraints for what are the possible  values of x
    int x = 1;
    int y = 1;

    // finds the maximum possible index using height
    // int maxIndex = findMaxIndex(arr, 0, len - 1, y);
    // cout << "The max Index is " << maxIndex << endl;
    // find the actual index using x using that given index
    int buildingNum = findMaxIndex(arr, 0, len - 1, y);
    // int buildingNum = findBuildingIndex(arr, x, maxIndex) + 1;
    if (buildingNum == -1)
    {
        cout << "Error: Building Not Found" << endl;
    }
    else
    {
        cout << "Building No. = " << buildingNum << endl;
    }

    for (int i = 0; i < len; i++)
    {
        delete[] arr[i];
    }
    delete[] arr;
    return 0;
}
